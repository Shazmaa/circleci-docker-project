version: 2.1

# Define orbs for additional functionality
orbs:
  sonarcloud: sonarsource/sonarcloud@2.0.0
  dependency-check: owasp/dependency-check@1.0.3

executors:
  docker-executor:
    docker:
      - image: cimg/python:3.8
  
  docker-executor-with-privileges:
    docker:
      - image: cimg/python:3.8-node
    resource_class: medium+

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Set up Virtual Environment
          command: |
            python -m venv venv
            . venv/bin/activate
            echo 'source venv/bin/activate' >> $BASH_ENV
      - run:
          name: Install Dependencies
          command: pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
            - ~/.cache/pip
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Build Application
          command: python setup.py install --user
      - persist_to_workspace:
          root: .
          paths:
            - .
            - venv
  
  sonar_scan:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - sonarcloud/scan:
          project_key: ${SONAR_PROJECT_KEY}
          organization: ${SONAR_ORG}
  
  dependency_check:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - dependency-check/scan:
          project: your_project_name
          output-format: "HTML,JSON"
      - store_artifacts:
          path: /home/circleci/project/owasp-dependency-check-report.html
          destination: dependency-report.html
      - persist_to_workspace:
          root: .
          paths:
            - owasp-dependency-check-report.html
            - dependency-check-report.json
  
  unit_test:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install Test Dependencies
          command: pip install pytest pytest-cov
      - run:
          name: Run Unit Tests
          command: |
            mkdir -p test-reports
            pytest tests/ --junitxml=test-reports/test-report.xml --cov=. --cov-report=xml
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports/test-report.xml
          destination: test-report.xml
      - store_artifacts:
          path: coverage.xml
          destination: coverage.xml
      - persist_to_workspace:
          root: .
          paths:
            - test-reports
            - coverage.xml
  
  notify:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - store_artifacts:
          path: owasp-dependency-check-report.html
          destination: dependency-report.html
      - store_artifacts:
          path: test-reports
          destination: test-reports
      - run:
          name: Send Notification
          command: |
            echo "Reports available at:"
            echo "- Dependency Report: ${CIRCLE_BUILD_URL}/artifacts/0/dependency-report.html"
            echo "- Test Report: ${CIRCLE_BUILD_URL}/artifacts/0/test-reports/test-report.xml"
            
            if [ -f test-reports/test-failure ]; then
              exit 1
            fi
  
  docker_build_push:
    executor: docker-executor-with-privileges
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Extract Project Name
          command: |
            if [ -f package.json ]; then
              PROJECT_NAME=$(python -c "import json; print(json.load(open('package.json'))['name'])")
            else
              PROJECT_NAME=$(basename $PWD)
            fi
            echo "export PROJECT_NAME=$PROJECT_NAME" >> $BASH_ENV
      - run:
          name: Build Docker Image
          command: |
            docker build -t ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:${CIRCLE_SHA1} .
            docker tag ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:latest
      - run:
          name: Push Docker Image to Docker Hub
          command: |
            echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            docker push ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:${CIRCLE_SHA1}
            docker push ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:latest

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - unit_test:
          requires:
            - build
      - sonar_scan:
          requires:
            - unit_test
          context: SonarCloud
      - dependency_check:
          requires:
            - build
      - notify:
          requires:
            - sonar_scan
            - dependency_check
            - unit_test
      - docker_build_push:
          requires:
            - sonar_scan
            - dependency_check
            - unit_test
          filters:
            branches:
              only: main
