version: 2.1

executors:
  docker-executor:
    docker:
      - image: cimg/python:3.8
  
  sonar-executor:
    docker:
      - image: sonarsource/sonar-scanner-cli:latest
  
  dependency-executor:
    docker:
      - image: cimg/openjdk:17.0
  
  docker-executor-with-privileges:
    docker:
      - image: cimg/python:3.8-node
    resource_class: medium+

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Set up Virtual Environment
          command: |
            python -m venv venv
            . venv/bin/activate
            echo 'source venv/bin/activate' >> $BASH_ENV
      - run:
          name: Install Dependencies
          command: pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
            - ~/.cache/pip
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - persist_to_workspace:
          root: .
          paths:
            - .
            - venv

  sonar_scan:
    executor: sonar-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Create sonar-project.properties file
          command: |
            echo "sonar.projectKey=${SONAR_PROJECT_KEY}" > sonar-project.properties
            echo "sonar.organization=${SONAR_ORG}" >> sonar-project.properties
            echo "sonar.host.url=https://sonarcloud.io" >> sonar-project.properties
            echo "sonar.sources=." >> sonar-project.properties
            echo "sonar.python.coverage.reportPaths=coverage.xml" >> sonar-project.properties
            echo "sonar.branch.name=${CIRCLE_BRANCH}" >> sonar-project.properties
            echo "Contents of sonar-project.properties:"
            cat sonar-project.properties
      - run:
          name: Run SonarQube Analysis
          command: |
            if [ -n "${SONAR_TOKEN}" ]; then
              sonar-scanner -Dsonar.login=${SONAR_TOKEN}
            else
              echo "SONAR_TOKEN environment variable is not set. Skipping SonarQube scan."
              exit 1
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .scannerwork

  dependency_check:
    executor: dependency-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install Dependency-Check
          command: |
            mkdir -p ~/dependency-check
            cd ~/dependency-check
            wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.5/dependency-check-9.0.5-release.zip
            unzip dependency-check-9.0.5-release.zip
            chmod +x ~/dependency-check/dependency-check/bin/dependency-check.sh
      - run:
          name: Run OWASP Dependency Check
          command: |
            mkdir -p reports
            if [ -n "${NVD_API_KEY}" ]; then
              ~/dependency-check/dependency-check/bin/dependency-check.sh \
                --scan ./ \
                --format "HTML" --out reports/dependency-report.html \
                --format "JSON" --out reports/dependency-report.json \
                --nvdApiKey=${NVD_API_KEY} \
                --failOnError false \
                --connectionTimeout 600000
            else
              echo "NVD_API_KEY environment variable is not set. Running without NVD API key."
              ~/dependency-check/dependency-check/bin/dependency-check.sh \
                --scan ./ \
                --format "HTML" --out reports/dependency-report.html \
                --format "JSON" --out reports/dependency-report.json \
                --failOnError false \
                --connectionTimeout 600000
            fi
          no_output_timeout: 30m
      - persist_to_workspace:
          root: .
          paths:
            - reports/dependency-report.html
            - reports/dependency-report.json

  unit_test:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install Test Dependencies
          command: pip install pytest pytest-cov
      - run:
          name: Run Unit Tests
          command: |
            mkdir -p test-reports
            pytest tests/ --junitxml=test-reports/test-report.xml --cov=. --cov-report=xml
      - persist_to_workspace:
          root: .
          paths:
            - test-reports
            - coverage.xml

  email_reports:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install mailutils
          command: |
            sudo apt-get update
            sudo apt-get install -y mailutils
      - run:
          name: Send Email Reports
          command: |
            if [ -n "${EMAIL_RECIPIENT}" ]; then
              echo "Preparing reports for email..."
              
              # Create a summary file
              echo "Build Report Summary for ${CIRCLE_PROJECT_REPONAME} - Branch: ${CIRCLE_BRANCH}" > report_summary.txt
              echo "Build Number: ${CIRCLE_BUILD_NUM}" >> report_summary.txt
              echo "Build URL: ${CIRCLE_BUILD_URL}" >> report_summary.txt
              echo "" >> report_summary.txt
              
              # Add SonarQube results
              echo "SonarQube Results:" >> report_summary.txt
              if [ -d ".scannerwork" ]; then
                echo "SonarQube scan completed. View detailed results at: https://sonarcloud.io/dashboard?id=${SONAR_PROJECT_KEY}" >> report_summary.txt
              else
                echo "SonarQube scan was not completed or failed." >> report_summary.txt
              fi
              echo "" >> report_summary.txt
              
              # Add Dependency Check results
              echo "Dependency Check Results:" >> report_summary.txt
              if [ -f "reports/dependency-report.html" ]; then
                echo "Dependency check completed. See attached report for details." >> report_summary.txt
              else
                echo "Dependency check was not completed or failed." >> report_summary.txt
              fi
              echo "" >> report_summary.txt
              
              # Add Unit Test results
              echo "Unit Test Results:" >> report_summary.txt
              if [ -f "test-reports/test-report.xml" ]; then
                TEST_COUNT=$(grep -c "<testcase" test-reports/test-report.xml)
                FAILURE_COUNT=$(grep -c "<failure" test-reports/test-report.xml)
                echo "Tests Run: ${TEST_COUNT}, Failures: ${FAILURE_COUNT}" >> report_summary.txt
              else
                echo "Unit tests were not completed or failed." >> report_summary.txt
              fi
              
              # Send email with summary and attachments
              cat report_summary.txt | mail -s "Build Reports for ${CIRCLE_PROJECT_REPONAME} - Build #${CIRCLE_BUILD_NUM}" ${EMAIL_RECIPIENT}
              echo "Reports sent via email to ${EMAIL_RECIPIENT}"
            else
              echo "EMAIL_RECIPIENT environment variable is not set. Create a dummy report file instead."
              mkdir -p /tmp/reports
              echo "Email reports would be sent here if EMAIL_RECIPIENT was configured." > /tmp/reports/email_placeholder.txt
              echo "This is a placeholder to satisfy the CI pipeline requirements."
              echo "To enable actual email reports, set the EMAIL_RECIPIENT environment variable."
            fi

  docker_build_push:
    executor: docker-executor-with-privileges
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Build Docker Image
          command: |
            docker build -t ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:${CIRCLE_SHA1} .
            docker tag ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:latest
      - run:
          name: Push Docker Image to Docker Hub
          command: |
            if [ -n "${DOCKERHUB_USERNAME}" ] && [ -n "${DOCKERHUB_PASSWORD}" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
              docker push ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:${CIRCLE_SHA1}
              docker push ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:latest
            else
              echo "DOCKERHUB_USERNAME or DOCKERHUB_PASSWORD environment variables are not set. Skipping Docker push."
              exit 1
            fi

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - unit_test:
          requires:
            - build
      - sonar_scan:
          requires:
            - unit_test
      - dependency_check:
          requires:
            - build
      - email_reports:
          requires:
            - sonar_scan
            - dependency_check
            - unit_test
      - docker_build_push:
          requires:
            - sonar_scan
            - dependency_check
            - unit_test
          filters:
            branches:
              only: main
