version: 2.1

executors:
  docker-executor:
    docker:
      - image: cimg/python:3.8
  
  sonar-executor:
    docker:
      - image: sonarsource/sonar-scanner-cli:latest
  
  dependency-executor:
    docker:
      # Use a base image with Java installed for dependency-check
      - image: cimg/openjdk:17.0
  
  docker-executor-with-privileges:
    docker:
      - image: cimg/python:3.8-node
    resource_class: medium+

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Set up Virtual Environment
          command: |
            python -m venv venv
            . venv/bin/activate
            echo 'source venv/bin/activate' >> $BASH_ENV
      - run:
          name: Install Dependencies
          command: pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
            - ~/.cache/pip
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Build Application
          command: python setup.py install --user
      - persist_to_workspace:
          root: .
          paths:
            - .
            - venv
  
  sonar_scan:
    executor: sonar-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Create sonar-project.properties file
          command: |
            cat > sonar-project.properties << EOF
            sonar.projectKey=${SONAR_PROJECT_KEY}
            sonar.organization=${SONAR_ORG}
            sonar.host.url=https://sonarcloud.io
            sonar.sources=.
            sonar.python.coverage.reportPaths=coverage.xml
            sonar.branch.name=${CIRCLE_BRANCH}
            EOF
      - run:
          name: Run SonarQube Analysis
          command: |
            # Create the project in SonarCloud first if it doesn't exist
            echo "Creating project in SonarCloud if it doesn't exist"
            curl -X POST -u ${SONAR_TOKEN}: \
              "https://sonarcloud.io/api/projects/create?project=${SONAR_PROJECT_KEY}&organization=${SONAR_ORG}&name=${SONAR_PROJECT_KEY}"
            
            # Run scanner
            sonar-scanner
      - persist_to_workspace:
          root: .
          paths:
            - .scannerwork
  
  dependency_check:
    executor: dependency-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install Dependency-Check
          command: |
            mkdir -p ~/dependency-check
            cd ~/dependency-check
            wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.5/dependency-check-9.0.5-release.zip
            unzip dependency-check-9.0.5-release.zip
            chmod +x ~/dependency-check/dependency-check/bin/dependency-check.sh
      - run:
          name: Run OWASP Dependency Check
          command: |
            mkdir -p reports
            ~/dependency-check/dependency-check/bin/dependency-check.sh \
              --scan ./ \
              --format "HTML" --out reports/dependency-report.html \
              --format "JSON" --out reports/dependency-report.json
      - store_artifacts:
          path: reports/dependency-report.html
          destination: dependency-report.html
      - persist_to_workspace:
          root: .
          paths:
            - reports/dependency-report.html
            - reports/dependency-report.json
  
  unit_test:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install Test Dependencies
          command: pip install pytest pytest-cov
      - run:
          name: Run Unit Tests
          command: |
            mkdir -p test-reports
            pytest tests/ --junitxml=test-reports/test-report.xml --cov=. --cov-report=xml
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports/test-report.xml
          destination: test-report.xml
      - store_artifacts:
          path: coverage.xml
          destination: coverage.xml
      - persist_to_workspace:
          root: .
          paths:
            - test-reports
            - coverage.xml
  
  notify:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - store_artifacts:
          path: reports
          destination: reports
      - store_artifacts:
          path: test-reports
          destination: test-reports
      - run:
          name: Send Notification
          command: |
            echo "Reports available at:"
            echo "- Dependency Report: ${CIRCLE_BUILD_URL}/artifacts/0/reports/dependency-report.html"
            echo "- Test Report: ${CIRCLE_BUILD_URL}/artifacts/0/test-reports/test-report.xml"
            
            if [ -f test-reports/test-failure ]; then
              exit 1
            fi
  
  docker_build_push:
    executor: docker-executor-with-privileges
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Extract Project Name
          command: |
            if [ -f package.json ]; then
              PROJECT_NAME=$(python -c "import json; print(json.load(open('package.json'))['name'])")
            else
              PROJECT_NAME=$(basename $PWD)
            fi
            echo "export PROJECT_NAME=$PROJECT_NAME" >> $BASH_ENV
      - run:
          name: Build Docker Image
          command: |
            docker build -t ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:${CIRCLE_SHA1} .
            docker tag ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:latest
      - run:
          name: Push Docker Image to Docker Hub
          command: |
            echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            docker push ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:${CIRCLE_SHA1}
            docker push ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:latest

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - unit_test:
          requires:
            - build
      - sonar_scan:
          requires:
            - unit_test
      - dependency_check:
          requires:
            - build
      - notify:
          requires:
            - sonar_scan
            - dependency_check
            - unit_test
      - docker_build_push:
          requires:
            - sonar_scan
            - dependency_check
            - unit_test
          filters:
            branches:
              only: main
